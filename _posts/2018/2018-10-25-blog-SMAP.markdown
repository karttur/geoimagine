---
layout: post
title: Processing of SMAP data
modified: '2018-10-25 T18:17:25.000Z'
categories: blog
excerpt: "Processing SMAP data using Karttur's GeoImagine Framework"
image: avg-trmm-3b43v7-precip_3B43_trmm_2001-2016_A
date: '2018-10-25 T18:17:25.000Z'
comments: true
share: true
figure1: soil-moisture-avg_SPL3SMP_global_2015-2018@D001_005
figure2A: soil-moisture-am_SPL3SMP_global_20160122_005
figure2B: soil-moisture-avg_SPL3SMP_global_20160122_005
figure2C: soil-moisture-pm_SPL3SMP_global_20160122_005
figure3: soil-moisture-avg_SPL3SMP_global_2016009_005
movie1: soil-moisture-avg_SPL3SMP_global_2015121-2018345_005
movie2: soil-moisture-avg_SPL3SMP_global_2015-2018@16D_005
---
<script src="https://karttur.github.io/common/assets/js/karttur/togglediv.js"></script>

# Introduction

This post introduces data processing from the [Soil Moisture Active Passive (SMAP)](https://smap.jpl.nasa.gov) mission in Karttur's GeoImagine Framework. To actually repeat the steps you must have installed Karttur´s GeoImagine Framework.

<figure>
<img src="{{ site.commonurl }}/images/{{ site.data.images[page.figure1].file }}">
<figcaption> {{ site.data.images[page.figure1].caption }} </figcaption>
</figure>

# SMAP

The Soil Moisture Active and Passive (SMAP) mission estimates the global top 5 cm soil moisture with approximately a weekly interval. SMAP also determines if the ground is frozen or thawed in colder areas of the world. SMAP was developed for using a combination of active and passive microwave sensors. The active sensor, however, only worked for a couple of months, and the original SMAP combined active and passive data are only available from 13 april to 7 july 2015. Both the active radar and the passive radiometer use the L-band, a  microwave frequency that is less disturbed by vegetation and has better ground penetration compared to the more commonly used C-band.

The SMAP passive radiometer original spatial resolution is 36 km, and has been operational since March 2015. Recent algorithmic development has allowed a 9 km enhanced product. Combined with the Sentinel-I active microwave sensor (C-band) a new enhanced active-passive product at 3 km spatial resolution is also under development.

This post summarises how the SMAP processing is done using Karttur´s GeoImagine Framework. In this post I have used [SMAP L3 Radiometer Global Daily 36 km EASE-Grid Soil Moisture, Version 5](https://nsidc.org/data/spl3smp) to illustrate the SMAP processing.

## Python Package

The GeoImagine Framework includes a package for specific SMAP processing: <span class='package'>[geoimagine-smap](https://github.com/karttur/geoimagine-smap/)</span>. The pacakge contains three python modules: <span class='file'>smap.py</span>, span class='file'>definetemplate.py</span> and <span class='file'>hdf5_2_geotiff.py</span>.

The module <span class='file'>definetemplate.py</span> is used for adding records to the SMAP database table on templates. The templates table is required when extracting and organizing SMAP data. The templates define both which layers to extract, how to name them and where to save them. You can accept the default templates that are installed with the GeoImagine Framework database, or you can redefine the database using the <span class='file'>definetemplate.py</span> module.

SMAP data is projected to an EASE-grid (see below) and the translation of the original hdf data to geotiff requires a special solution; available in the module <span class='file'>hdf5_2_geotiff.py</span>.

The module <span class='file'>smap.py</span> contans all other SMAP specific processing.

## Data access and download

The SMAP data is available via [Alaska Satellite Facility](https://www.asf.alaska.edu/smap/) (ASF) and [National Snow and Ice Data Center](https://nsidc.org/data/smap) (NSIDC). The higher level products (used in this post) are only available from NSIDC. To get access to the data hosted by NSIDC you must sign up with [https://earthdata.nasa.gov](https://earthdata.nasa.gov).

## Searching the SMAP online repository

The way Karttur´s GeoImagine Framework is organized, you first have to search the online repository, then register the search results in the Framework postgres database. Once the data is registered you can download and extract the actual SMAP data.

### Search

I have tried to find some library or database that lists the data available in the online repositories, but have failed to find any. Instead I created a solution where I use <span class ='terminalapp'>wget</span> ("web get") for downloading an html coded list of available data. The Framework process for searching the online repository for SMAP data using <span class ='terminalapp'>wget</span> is <span class='package'>SearchSmapProducts</span>.

<button id= "toggleSearchSmap" onclick="hiddencode('SearchSmap')">Hide/Show smap-daac-download.xml</button>

<div id="SearchSmap" style="display:none">

{% capture text-capture %}
{% raw %}

```
<?xml version='1.0' encoding='utf-8'?>
<searchsmap>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '03' startday = '31' endyear = '2015' endmonth = '08' endday = '08' timestep='D'></period>
	<process processid ='SearchSmapProducts' dsversion = '1.3'>
		<parameters remoteuser='YourEarthDataUser' product="SPL3SMP" version="003" serverurl="https://n5eil01u.ecs.nsidc.org/" ></parameters>
		<dstpath volume = "Karttur2tb"></dstpath>
	</process>
</searchsmap>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

Before running the process <span class='package'>SearchSmapProducts</span> you must have the credentials for accessing [https://earthdata.nasa.gov](https://earthdata.nasa.gov) in a <span class='file'>.netrc</span> file, with the username corresponding to the one given in the xml file ('YourEarthDataUser').

The process <span class='package'>SearchSmapProducts</span> drills into [https://earthdata.nasa.gov](https://earthdata.nasa.gov) and loads the available files as html code. By default the process save one html file per date (online sub-folder) under the path <span class='file'>../smap/source/yyyy.mm.dd/</span> (where yyyy.mm.dd/ is the date of acquisition) on the volume identified in the xml file. The files are ordinary html files, but with the <span class='file'>.html</span> extension omitted.

## Transfer search to database

To transfer the search results to the GeoImagine Framework database you must run the process <span class='package'>SmapSearchToDB</span>. This process reads the html files, extracts the required information and inserts the information in the database. When finished it moves the html file to a sub-folder called <span class='file'>done</span>. If, for some reason, you delete your database all you need to do is to take all the html files under the <span class='file'>done</span> sub-folder and move them one level up and then re-run <span class='package'>SmapSearchToDB</span>.

<button id= "toggleSearchToDB" onclick="hiddencode('SearchToDB')">Hide/Show SmapSearchToDB.xml</button>

<div id="SearchToDB" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<searchtodb>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '04' startday = '13' endyear = '2015' endmonth = '08' endday = '08' timestep='D'></period>

	<process processid ='SmapSearchToDB' dsversion = '1.3'>
		<parameters product="SPL3SMAP" version="003"></parameters>
		<srcpath volume = "Karttur2tb" ></srcpath>
	</process>		
</searchtodb>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## Downloading SMAP data

With the available SMAP data registered in the database you can download any of the registered data using the process <span class='package'>DownLoadSmapDaac</span>.

I have tried to figure out how to extract individual layers from the SMAP online repository HDF5 files. But I have not managed. Hence the process <span class='package'>DownLoadSmapDaac</span> will always download the complete HDF5 files for each product and date. For most of the products this is really not a problem, but the recently available enhanced products can be very large.

When downloading the SMAP HDF5 files you can either download the files on the fly, or write the download commands to a shell script file. The latter is the default. To change it you need to set the parameter _asscript_ to False.

<button id= "toggleDownload" onclick="hiddencode('Download')">Hide/Show Download.xml</button>

<div id="Download" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<downloadsmap>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '04' startday = '13' endyear = '2015' endmonth = '08' endday = '08' timestep='D'></period>

	<process processid ='DownLoadSmapDaac' dsversion = '1.3'>
		<parameters remoteuser='YourEarthDataUser' product="SPL3SMAP" version="003" serverurl="https://n5eil01u.ecs.nsidc.org/" ></parameters>
		<dstpath volume = "Karttur3tb" hdrfiletype = "h5" datfiletype = "h5"></dstpath>
	</process>
</downloadsmap>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

If you did not add the parameter _asscript_, including setting it to False, the process produces a script file that you must run manually. You can also copy the script to another machine (with better internet connection) and run the script from there. The machine you run from must have a <span class='file'>.netrc</span> file with your EarthData credentials. And the volume indicated in the xml must either exists on the machine from which you download, or you need to edit the script to reflect a volume that is available on the machine from which you download. To run the shell script you must first make it executable, and then execute it:

<span class='terminal'>$ chmod 777 /path/to/script.sh</span>

<span class='terminal'>$ /path/to/script.sh</span>

## Extracting SMAP layers

The layers included in each HDF5 file, as well as metadata, can be accessed using <span class='terminalapp'>gdalinfo</span>.

<span class='terminal'>gdalinfo path/to/smap/hdf5file.H5</span>

In Karttur's GeoImagine Framework the layers to extract have to be defined in the database, in the table _templates_ under the _smap_ schema. The template table also define the celltype, cellnull, projection and folder where to store the extracted layer. How to define which layers to extract is the topic of [another post](../blog-SMAP-template/).

### The EASE-Grid projection

The SMAP data are projected using the equal area  [EASE-Grid](https://nsidc.org/data/ease/ease_grid.html) 2.0 projection, using three different regions:

- A global cylindrical EASE grid (EPSG:3410)
- A northern polar EASE grid (EPSG:3408)
- A southern polar EASE grid (EPSG:3409)

As with all other data imported to Karttur's GeoImagine Framework, the basic projection is kept, and only changed when data from different systems are combined (i.e. you can combine SMAP with MODIS by transferring the SMAP data to fit MODIS sinusoidal grids).

It is best to use the EPSG code when working with the SMAP data. The EASE-Grid 2.0 projection requires that proj4 is at least version 4.8. You need to check that out. If you have an earlier version of proj4, you can use the proj4 definition instead of the EPSG code:

```
+proj=cea +lat_0=0 +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs
```

If you look in the module <span class='module'>hdf5_2_geotff.py</span>, you can alter between defining the projection using proj4 and the EPSG code.

The process <span class='package'>extractSmapHdf</span> extracts the layers defined in the database from the HDF5 files.

<button id= "toggleExtract" onclick="hiddencode('Extract')">Hide/Show Extract.xml</button>

<div id="Extract" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<searchdatapool>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '04' startday = '13' endyear = '2020' endmonth = '10' endday = '010' timestep='D'></period>
	<process processid ='extractSmapHdf' dsversion = '1.3'>
		<parameters product="SPL3SMP" version="005" exploded ='False' remoteuser='YourEartDataUser' serverurl="https://n5eil01u.ecs.nsidc.org/"></parameters>
		<dstpath volume = "Karttur3tb"></dstpath>
	</process>
</searchdatapool>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

The process identifies missing HDF5 files on the fly, and create a shell script file that, if executed, will download the missing files. Thus you have to give your remote user for EarthData. If you do not have any user for EarthData and will not use the script, you can enter any name.

## Overlay am and pm to daily average

The dowloaded daily data for most SMAP L3 products are separated into morning (am) and evening (pm) observed soil moisture. To create a daily average (minimum or maximium) composites use the Framework process <span class='package'>conditionaloverlay</span>. The <span class='package'>conditionaloverlay</span> ignores "null" when overlaying data, and for creating the daily average that is what you want.

<button id= "toggleOverlayAmPm" onclick="hiddencode('OverlayAmPm')">Hide/Show OverlayAmPm.xml</button>

<div id="OverlayAmPm" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<resampletssmap>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '04' startday = '13' endyear = '2018' endmonth = '12' endday = '31' timestep='D'></period>
	<process processid ='conditionalsmapoverlay' dsversion = '1.3'>
		<overwrite>True</overwrite>
		<parameters acceptmissing = 'True' copycomp ='template' targettimestep = '16D' startstep='1' method ='avg' template = 'soil-moisture-am'></parameters>
		<srcpath volume = "Karttur3tb" hdrfiletype='tif'></srcpath>
		<dstpath volume = "Karttur3tb" hdrfiletype='tif'></dstpath>
		<srccomp>
			<soil-moisture-am id='layer1' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005">
			</soil-moisture-am>
			<soil-moisture-pm id='layer2' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005">
			</soil-moisture-pm>
		</srccomp>
		<dstcomp>
			<soil-moisture-avg id='layersum' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>
		</dstcomp>
	</process>
</resampletssmap>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

<figure class="third">

<a href="{{ site.commonurl }}/images/{{ site.data.images[page.figure2A].source }}"><img src="{{ site.commonurl }}/images/{{ site.data.images[page.figure2A].file }}" alt="image"></a>

<a href="{{ site.commonurl }}/images/{{ site.data.images[page.figure2B].source }}"><img src="{{ site.commonurl }}/images/{{ site.data.images[page.figure2B].file }}" alt="image"></a>

<a href="{{ site.commonurl }}/images/{{ site.data.images[page.figure2C].source }}"><img src="{{ site.commonurl }}/images/{{ site.data.images[page.figure2C].file }}" alt="image"></a>

<figcaption>Daily SMAP maps for the 22 January 2016. The left image is the morning (am) soil moisture, the right image is the afternoon (pm) soil moisture and the central image is a combination of the other two. </figcaption>
</figure>

## Temporal resampling

For some of the analysis and modeling the daily timestep is the best solution. But for comparison with e.g. climate data, vegetation growth, or other satellite images like MODIS, I prefer to aggregate (resample) the SMAP data. A lot of the processing I do either rely on weekly to biweekly, or monthly timesteps. MODIS products typically represent 8 or 16 day intervals, the old crop-climate data from AVHRR images usually come as three (3) monthly periods, and a lot of climate data is available using monthly aggregated data.

The temporal aggregation can be done using Karttur's GeoImagine Framework. The temporal frequencies defined in Karttur's GeoImagine Framework rely on the [<span class='package'>Pandas</span> package](https://pandas.pydata.org). <span class='package'>Pandas</span> is widely used for handling time series data in Python, and is part of Anaconda (the python distribution used by Karttur´s GeoImagine Framework). It can be a bit slow to use for resampling, and for some of the resampling the GeoImagine Framework instead use numba JIT (Just In Time) compiled scripts. But the frequency definitions and conversions rely on <span class='package'>Pandas</span>.

The Framework process for temporal aggregation (resampling) of SMAP data is <span class='package'><resampletssmap/span>.

### Resampling to 8 or 16 day intervals

To resample SMAP from daily to 16 day intervals (same temporal resolution as several MODIS products) set the parameter _targettimestep_ to _16D_. The start date given in the period tag will determine the start and end date of each 16D period. You can create a gliding mean of the 16D interval by repeating the process 16 times, each time with a 1 day difference of the starting date. The setting below will cause the 16D interval to coincide with The MODIS 16D standard intervals with the first date of observation at 1st of January.

<button id= "toggleResampling" onclick="hiddencode('Resampling')">Hide/Show Resampling.xml</button>

<div id="Resampling" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<resampletssmap>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2016' startmonth = '01' startday = '01' endyear = '2017' endmonth = '01' endday = '10' timestep='D'></period>
	<process processid ='resampletssmap' dsversion = '1.3'>
		<overwrite>True</overwrite>
		<parameters acceptmissing = 'True' copycomp ='resamplets' targettimestep = '16D' startstep='1' method ='avg'></parameters>
		<srcpath volume = "Karttur3tb" hdrfiletype='tif'></srcpath>
		<dstpath volume = "Karttur3tb" hdrfiletype='tif'></dstpath>
		<srccomp>
			<soil-moisture-avg source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>
		</srccomp>
	</process>
</resampletssmap>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

<figure>
<img src="{{ site.commonurl }}/images/{{ site.data.images[page.figure3].file }}">
<figcaption> {{ site.data.images[page.figure3].caption }} </figcaption>
</figure>

## Seasonal signal extraction

The process <span class='package'>extractseasonsmap</span> extracts the seasonal multiyear signal. The extraction can be set to force interpolaiton of all seasons lacking data. For the SMAP soil moisture data all frozen soils lack estimates of soil moisture, and the soil moisture conditions under frozen soil are force-filled by interpolation for all pixels. This is an oversimplification, but the animation, following further down, becomes more pleasing and easy to follow.

<button id= "toggleSeasonalSignal" onclick="hiddencode('SeasonalSignal')">Hide/Show SeasonalSignal.xml</button>

<div id="SeasonalSignal" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<runprocess>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = '2015' startmonth = '04' startday = '23' endyear = '2018' endmonth = '04' endday = '25' timestep='16D'></period>
	<process processid ='extractseasonsmap' dsversion = '1.3'>
		<overwrite>True</overwrite>
		<parameters></parameters>
		<srcpath volume = "Karttur3tb" hdrfiletype='tif'></srcpath>
		<dstpath volume = "Karttur3tb" hdrfiletype='tif'></dstpath>
		<srccomp>
			<soil-moisture-avg source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>
		</srccomp>
	</process>
</runprocess>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## SMAP layout

The layout processing required for exporting the SMAP data to nicely looking maps, images and animation, include setting up:

- palettes
- legends
- scaling
- movieclock

### SMAP palettes

To set up a palette, use the process <span class='package'>addrasterpalette</span>. In the example below three different SMAP related palettes are defined: for soil moisture (vol/vol), for change in soil moisture and for variations in soil moisture

<button id= "togglePalette" onclick="hiddencode('Palette')">Hide/Show Palette.xml</button>

<div id="Palette" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<palette>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'system'></userproj>
	<path></path>
	<!-- addrasterpalette smap-->
	<process processid = 'addrasterpalette'>
		<overwrite>Y</overwrite>
		<delete>N</delete>
		<parameters palette = 'smap' compid='test'>
			<setcolor id = '0' red = '255' green ='132' blue='94' alpha ='0' label='0' hint='0' ></setcolor>			
			<setcolor id = '25' red = '240' green ='224' blue='148' alpha ='0' label='10' hint='NA' ></setcolor>			
			<setcolor id = '50' red = '162' green ='162' blue='122' alpha ='0' label='50' hint='no correlation' ></setcolor>			
			<setcolor id = '100' red = '70' green ='89' blue='112' alpha ='0' label='100' hint='positive correclation' ></setcolor>
			<setcolor id = '150' red = '20' green ='60' blue='210' alpha ='0' label='150' hint='positive correclation' ></setcolor>
			<setcolor id = '200' red = '2' green ='1' blue='190' alpha ='0' label='200' hint='strong positive correlation' ></setcolor>
			<setcolor id = '250' red = '2' green ='1' blue='190' alpha ='0' label='250' hint='strong positive correlation' ></setcolor>
			<setcolor id = '253' red = '245' green ='237' blue='182' alpha ='0' label='dry (0)' hint='completely dry' ></setcolor>
			<setcolor id = '254' red = '32' green ='32' blue='32' alpha ='255' label='frame' hint='frame' ></setcolor>
			<setcolor id = '255' red = '250' green ='250' blue='250' alpha ='255' label='255' hint='no data' ></setcolor>
		</parameters>			
	</process>
	<!-- addrasterpalette smapdelta-->
	<process processid = 'addrasterpalette'>
		<overwrite>Y</overwrite>
		<delete>N</delete>
		<parameters palette = 'smapdelta' compid='test'>
			<setcolor id = '0' red = '200' green ='50' blue='0' alpha ='0' label='0' hint='strongly negative correlation' ></setcolor>			
			<setcolor id = '62' red = '255' green ='225' blue='30' alpha ='0' label='63' hint='negative correlation' ></setcolor>			
			<setcolor id = '125' red = '190' green ='190' blue='190' alpha ='0' label='125' hint='positive correclation' ></setcolor>
			<setcolor id = '187' red = '20' green ='110' blue='200' alpha ='0' label='188' hint='strong positive correlation' ></setcolor>
			<setcolor id = '250' red = '2' green ='1' blue='143' alpha ='0' label='250' hint='strong positive correlation' ></setcolor>
			<setcolor id = '253' red = '245' green ='237' blue='182' alpha ='0' label='dry (0)' hint='completely dry' ></setcolor>
			<setcolor id = '254' red = '32' green ='32' blue='32' alpha ='255' label='frame' hint='frame' ></setcolor>
			<setcolor id = '255' red = '250' green ='250' blue='250' alpha ='255' label='255' hint='no data' ></setcolor>
		</parameters>			
	</process>
	<!-- addrasterpalette smapstd-->
	<process processid = 'addrasterpalette'>
		<overwrite>Y</overwrite>
		<delete>N</delete>
		<parameters palette = 'smapstd' compid='test'>
			<setcolor id = '0' red = '200' green ='200' blue='200' alpha ='0' label='125' hint='positive correclation' ></setcolor>
			<setcolor id = '50' red = '240' green ='224' blue='148' alpha ='0' label='188' hint='strong positive correlation' ></setcolor>
			<setcolor id = '100' red = '162' green ='162' blue='122' alpha ='0' label='188' hint='strong positive correlation' ></setcolor>
			<setcolor id = '150' red = '70' green ='89' blue='112' alpha ='0' label='250' hint='strong positive correlation' ></setcolor>
			<setcolor id = '200' red = '20' green ='60' blue='210' alpha ='0' label='250' hint='strong positive correlation' ></setcolor>
			<setcolor id = '250' red = '2' green ='1' blue='190' alpha ='0' label='250' hint='strong positive correlation' ></setcolor>		
			<setcolor id = '253' red = '245' green ='237' blue='182' alpha ='0' label='dry (0)' hint='completely dry' ></setcolor>
			<setcolor id = '254' red = '32' green ='32' blue='32' alpha ='255' label='frame' hint='frame' ></setcolor>
			<setcolor id = '255' red = '250' green ='250' blue='250' alpha ='255' label='255' hint='no data' ></setcolor>
		</parameters>			
	</process>
</palette>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## SMAP Legends

To set up legends, use the process <span class='package'>createlegend</span>.

<button id= "toggleLegend" onclick="hiddencode('Legend')">Hide/Show Legend.xml</button>

<div id="Legend" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<palette>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'system'></userproj>
	<!-- Create legend -->
	<!-- NOTE THE ID IS ONLY USED IN THE SCRIPTING SO IT CAN HAVE (UNIQUE) DUMMY VALUES HERE -->
	<!-- GRACE monthly cmwater-->
	<process processid = 'createlegend' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters columnhead='Soil moisture (%)' palmax='200' precision='0'></parameters>			
    	<comp id = '1' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '2' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '4' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '5' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

		<comp id = '11' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am-16D" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '12' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm-16D" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '13' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '14' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min-16D" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '15' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max-16D" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

		<comp id = '21' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am-16D-sesn" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '22' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm-16D-sesn" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '23' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D-sesn" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '24' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min-16D-sesn" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '25' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max-16D-sesn" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

	</process>
</palette>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## SMAP Scaling

To set up scalings, use the process <span class='package'>createscaling</span>.

<button id= "toggleScaling" onclick="hiddencode('Scaling')">Hide/Show Scaling.xml</button>

<div id="Scaling" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<scaling>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'system'></userproj>
	<!-- Create scaling -->

	<!-- NOTE THE ID IS OLNLY USED IN THE SCRIPTING SO IT CAN HAVE (UNIQUE) DUMMY VALUES HERE -->
	<!-- SMAP vol/vol-->
	<process processid = 'createscaling' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters scalefac='200' mirror0='False'></parameters>			
    	<comp id = '1' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '2' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '4' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '5' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

		<comp id = '11' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am-16D" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '12' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm-16D" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '13' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '14' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min-16D" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '15' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max-16D" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

		<comp id = '21' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-am-16D-sesn" band = "soil-moisture-am" prefix = "soil-moisture-am" suffix = "005"></comp>    	
		<comp id = '22' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-pm-16D-sesn" band = "soil-moisture-pm" prefix = "soil-moisture-pm" suffix = "005"></comp>    	
		<comp id = '23' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D-sesn" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005"></comp>    	
		<comp id = '24' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-min-16D-sesn" band = "soil-moisture-min" prefix = "soil-moisture-min" suffix = "005"></comp>    	
		<comp id = '25' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-max-16D-sesn" band = "soil-moisture-max" prefix = "soil-moisture-max" suffix = "005"></comp>    	

	</process>
</scaling>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## Karttur´s movieclock

As part of Karttur´s GeoImagine Framework, time series images can be converted to animations with a timeline and a clock showing the year and the season. To create animations you must have installed the terminal apps <span class='terminalapp'>ImageMagick</span> (for command line image processing) and <span class='terminalapp'>ffmpeg</span> (for command line movie making). Here are the links to my blog posts on how to install and use <span class='terminalapp'>ImageMagick</span> and <span class='terminalapp'>ffmpeg</span>:

- [ImageMagick](https://karttur.github.io/setup-theme-blog/blog/install-imagemagick/)
- [FFmpeg](https://karttur.github.io/setup-theme-blog/blog/ffmpeg-movie/)

The post on <span class='terminalapp'>ffmpeg</span> also illustrates the use of the GeoImagine Framework movieclock.

### Defining a movieclock

An animation requires a pre-defined movieclock (but usually the "default" movieclock is OK), and that the time series data is exported and then converted to movie frames.

A movieclock object defines the colors, types and sizes of the elements building the clock and timeline in the animation.  Basically you do not need to define any of the elements, they are all defaulted. But if you want other widhts, margins, colors etc, all can be set using the process <span class='package'>addmovieclock</span>

<button id= "toggleAddMovieClock" onclick="hiddencode('AddMovieClock')">Hide/Show AddMovieClock.xml</button>

<div id="AddMovieClock" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<palette>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'system'></userproj>
	<path></path>

	<!-- createmovieclock -->
	<process processid = 'addmovieclock'>
		<overwrite>Y</overwrite>
		<delete>N</delete>
		<parameters name = 'default'></parameters>
	</process>
</palette>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## Export SMAP

Once you have creates the palettes, legends and scalings for SMAP, you can export the data as color images (maps). The scaling can not be set in the <span class='package'>exporttobytesmap</span> process. It must be given in the database and related to the data to be exported using the theme (folder) and name (band) of the layer. The palette to use must be set as a parameter.

<button id= "toggleExport" onclick="hiddencode('Export')">Hide/Show Export.xml</button>

<div id="Export" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<runprocess>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = "2015" startmonth='1' startday='1' endyear = "2018" endmonth='12' endday='31' timestep='seasonal-16D'></period>

	<!-- exporttobyte avg A -->
	<process processid = 'exporttobytesmap' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters palette= 'smap' movieframes= 'True'></parameters>		
		<srcpath volume = "karttur3tb" hdrfiletype = 'tif' datfiletype = 'tif'></srcpath>
		<dstpath volume = "karttur3tb" hdrfiletype = 'tif' datfiletype = 'tif'></dstpath>    	
		<srccomp>			
			<soil-moisture-avg id = 'layer3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D-sesn" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>
		</srccomp>
	</process>
</runprocess>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

## Movie frames

To create movie frames, you must first have exported the images, and then you can run the process <span class='package'>movieframesmap</span>.


<button id= "toggleMovieFrame" onclick="hiddencode('MovieFrame')">Hide/Show MovieFrame.xml</button>

<div id="MovieFrame" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<runprocess>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = "2015" startmonth='4' startday='23' endyear = "2018" endmonth='12' endday='31' timestep='16D'></period>

	<!-- exporttobyte avg A -->
	<process processid = 'movieframesmap' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters name = 'smap' width = '800' crop='800,336,0,0' emboss='KARTTUR' embossdims='720,150' embossptsize='100'></parameters>
		<srcpath volume = "karttur3tb" hdrfiletype = 'tif' datfiletype = 'tif'></srcpath> 	
		<dstpath volume = "/Users/thomasgumbricht/movieclock" hdrfiletype = 'png' datfiletype = 'png'></dstpath>    	
		<srccomp>			
			<soil-moisture-avg id = 'layer3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>
		</srccomp>

	</process>
</runprocess>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

As default the script produces a shell script file that you must execute manually to produce the movie frames. The advantage with the script file is that you can edit the area of the map to appear in the movie as well as the embossed watermark text. The link to the script file is reported by the process.

## Movie clock

The final step before producing the time series animation is to create the movie-clock that fits with your movie frames. You need to set the dimensions of the movie clock manually as parameters in the process <span class='package'>movieclocksmap</span>.

<button id= "toggleMovieClock" onclick="hiddencode('MovieClock')">Hide/Show MovieClock.xml</button>

<div id="MovieClock" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<runprocess>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = "2015" startmonth='4' startday='23' endyear = "2018" endmonth='12' endday='31' timestep='16D'></period>		

	<!-- exporttobyte avg A -->
	<process processid = 'movieclocksmap' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters name = 'smap' width = '800'></parameters>		
		<dstpath volume = "/Users/thomasgumbricht/movieclock" hdrfiletype = 'png' datfiletype = 'png'></dstpath>    	
		<dstcomp>			
			<soil-moisture-avg id = 'layer3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>    	
		</dstcomp>
	</process>
</runprocess>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

The process <span class='package'>movieclocksmap</span> use a combination of python image processing and <span class='terminalapp'>ImageMagick</span> commands.

The process also produces two shell script files. The first (in the subfolder <span class='file'>frames</span>) overlays the movieclock and the image frames, and the second (in the subfolder <span class='file'>movie</span>) produces the movie using <span class='terminalapp'>ffmpeg</span>.

<button id= "toggleMovieClock_B" onclick="hiddencode('MovieClock_B')">Hide/Show MovieClock.xml</button>

<div id="MovieClock_B" style="display:none">

{% capture text-capture %}
{% raw %}
```
<?xml version='1.0' encoding='utf-8'?>
<runprocess>
	<userproj userid = 'karttur' projectid = 'karttur' tractid= 'karttur' siteid = '*' plotid = '*' system = 'smap'></userproj>
	<period startyear = "2015" startmonth='4' startday='23' endyear = "2018" endmonth='12' endday='31' timestep='16D'></period>		

	<!-- exporttobyte avg A -->
	<process processid = 'movieclocksmap' version = '1.3'>
		<overwrite>True</overwrite>
		<parameters name = 'smap' width = '800'></parameters>		
		<dstpath volume = "/Users/thomasgumbricht/movieclock" hdrfiletype = 'png' datfiletype = 'png'></dstpath>    	
		<dstcomp>			
			<soil-moisture-avg id = 'layer3' source = "SPL3SMP.005" product = "SPL3SMP" folder = "soil-moisture-avg-16D" band = "soil-moisture-avg" prefix = "soil-moisture-avg" suffix = "005">
			</soil-moisture-avg>    	
		</dstcomp>
	</process>

</runprocess>
```
{% endraw %}
{% endcapture %}
{% include widgets/toggle-code.html  toggle-text=text-capture  %}
</div>

<figure>
<iframe src="{{ site.commonurl }}/movies/{{ site.data.movies[page.movie1].file }}" width="{{ site.data.movies[page.movie1].width }}" height="{{ site.data.movies[page.movie1].height }}" frameborder="0">
</iframe>
<figcaption> {{ site.data.movies[page.movie1].caption }} </figcaption>
</figure>

<figure>
<iframe src="{{ site.commonurl }}/movies/{{ site.data.movies[page.movie2].file }}" width="{{ site.data.movies[page.movie2].width }}" height="{{ site.data.movies[page.movie2].height }}" frameborder="0">
</iframe>
<figcaption> {{ site.data.movies[page.movie2].caption }} </figcaption>
</figure>

# Resources

[Karttur´s GeoImagine Framework](https://karttur.github.io/setup-ide/)

[ImageMagick for batch processing maps](https://karttur.github.io/setup-theme-blog/blog/install-imagemagick/)

[FFmpeg for map animations](https://karttur.github.io/setup-theme-blog/blog/ffmpeg-movie/)
